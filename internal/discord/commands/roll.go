package commands

import (
	"log"
	"math/rand"
	"strconv"
	"strings"

	"github.com/bwmarrin/discordgo"
)

func (h *Handler) roll(s *discordgo.Session, m *discordgo.MessageCreate) {
	str := strings.Fields(m.Content)
	maxScore := 100
	quantity := 1

	if len(str) == 4 && str[1] == "duel" {
		h.duelRoll(s, m, str)
		return
	}

	switch len(str) {
	case 1:
		break
	case 3:
		var err error
		quantity, err = strconv.Atoi(str[2])
		if err != nil {
			quantity = 1
		}
		fallthrough
	case 2:
		var err error
		maxScore, err = strconv.Atoi(str[1])
		if err != nil {
			maxScore = 100
		}
	}

	// build output string
	var sb strings.Builder
	sb.WriteString(getMessageAuthorNick(m))
	sb.WriteString(" (1-")
	sb.WriteString(strconv.Itoa(maxScore))
	sb.WriteString(") ")
	for i := 0; i < quantity; i++ {
		sb.WriteString(" :game_die:")
		sb.WriteString(strconv.Itoa(rand.Intn(maxScore) + 1)) //nolint:gosec
	}

	if _, err := s.ChannelMessageSend(m.ChannelID, sb.String()); err != nil {
		log.Println(err)
	}
}

func (h *Handler) duelRoll(s *discordgo.Session, m *discordgo.MessageCreate, str []string) {
	var sb strings.Builder
	if len(m.Mentions) != 1 {
		_, err := s.ChannelMessageSend(m.ChannelID, "–û–ø–ø–æ–Ω–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, —É–ø–æ–º—è–Ω–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞ —á–µ—Ä–µ–∑ @")
		if err != nil {
			return
		}
		return
	}

	opponent := m.Mentions[0]

	bet, err := strconv.Atoi(str[3])
	if err != nil {
		log.Println(err)
		return
	}
	if bet < 0 {
		_, _ = s.ChannelMessageSend(m.ChannelID, "–°—Ç–∞–≤–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π")
		return
	}

	authorScore, _ := h.repository.GetScore(m.Author.ID)
	opponentScore, _ := h.repository.GetScore(opponent.ID)
	if bet > authorScore {
		sb.WriteString("–°—Ç–∞–≤–∫–∞ —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∞, —É —Ç–µ–±—è –≤—Å–µ–≥–æ ")
		sb.WriteString(strconv.Itoa(authorScore))
		if _, err := s.ChannelMessageSend(m.ChannelID, sb.String()); err != nil {
			log.Println(err)
		}
		return
	}
	if bet > opponentScore {
		sb.WriteString("–£ —Ç–≤–æ–µ–≥–æ –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—á–∫–æ–≤, —Å—Ç–∞–≤–∫–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å ")
		sb.WriteString(strconv.Itoa(opponentScore))
		if _, err := s.ChannelMessageSend(m.ChannelID, sb.String()); err != nil {
			log.Println(err)
		}
		return
	}

	sb.WriteString(opponent.Mention())
	sb.WriteString(" —Ç–µ–±—è –≤—ã–∑–≤–∞–ª–∏ –Ω–∞ –¥—É—ç–ª—å, –Ω–∞–∂–º–∏ –Ω–∞ :game_die: —á—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å, –∏–ª–∏ :no_entry_sign: —á—Ç–æ–±—ã –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è")
	message, err := s.ChannelMessageSend(m.ChannelID, sb.String())
	if err != nil {
		log.Println(err)
	}
	err = s.MessageReactionAdd(m.ChannelID, m.ID, "üëç")
	if err != nil {
		return
	}
	err = s.MessageReactionAdd(message.ChannelID, message.ID, "üé≤")
	if err != nil {
		return
	}
	err = s.MessageReactionAdd(message.ChannelID, message.ID, "üö´")
	if err != nil {
		return
	}

	accept := <-h.eventChan
	if accept != "roll" {
		_, _ = s.ChannelMessageEdit(message.ChannelID, message.ID, opponent.Username+" –æ—Ç–∫–∞–∑–∞–ª—Å—è")
		return
	}

	authorRoll := rand.Intn(100) + 1   //nolint:gosec
	opponentRoll := rand.Intn(100) + 1 //nolint:gosec
	sb.Reset()
	sb.WriteString(getMessageAuthorNick(m) + " –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç " + strconv.Itoa(authorRoll) + "\n")
	sb.WriteString(opponent.Username + " –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç " + strconv.Itoa(opponentRoll) + "\n")
	if authorRoll == opponentRoll {
		sb.WriteString("–í–∞—à–∏ —Å–∏–ª—ã —Ä–∞–≤–Ω—ã, –æ–±–∞ –æ—Å—Ç–∞–ª–∏—Å—å –ø—Ä–∏ —Å–≤–æ—ë–º")
	} else if authorRoll > opponentRoll {
		err := h.repository.AddScore(m.Author.ID, bet)
		if err != nil {
			return
		}
		err = h.repository.AddScore(opponent.ID, -bet)
		if err != nil {
			return
		}
		sb.WriteString(getMessageAuthorNick(m) + " –ø–æ–±–µ–¥–∏–ª –∏ –ø–æ–ª—É—á–∞–µ—Ç " + strconv.Itoa(bet) + " –æ—á–∫–æ–≤ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞!")
	} else {
		err := h.repository.AddScore(m.Author.ID, -bet)
		if err != nil {
			return
		}
		err = h.repository.AddScore(opponent.ID, bet)
		if err != nil {
			return
		}
		sb.WriteString(opponent.Username + " –ø–æ–±–µ–¥–∏–ª –∏ –ø–æ–ª—É—á–∞–µ—Ç" + strconv.Itoa(bet) + " –æ—á–∫–æ–≤ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞!")
	}

	_, err = s.ChannelMessageSend(m.ChannelID, sb.String())
	if err != nil {
		log.Println(err)
	}
}
