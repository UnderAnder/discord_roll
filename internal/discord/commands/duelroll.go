package commands

import (
	"github.com/bwmarrin/discordgo"
	"log"
	"math/rand"
	"strconv"
	"strings"
)

// duelMessage Print invite to a duel and the result of the duel to the guild channel in response to the text command
func (h *Handler) duelMessage(s *discordgo.Session, m *discordgo.MessageCreate) {
	str := strings.Fields(m.Content)
	if len(str) != 3 {
		return
	}
	if len(m.Mentions) != 1 {
		_, err := s.ChannelMessageSend(m.ChannelID, "–û–ø–ø–æ–Ω–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, —É–ø–æ–º—è–Ω–∏ –æ–¥–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ —á–µ—Ä–µ–∑ @")
		if err != nil {
			log.Println(err)
		}
		return
	}

	bet, err := strconv.Atoi(str[2])
	if err != nil {
		_, err := s.ChannelMessageSend(m.ChannelID, "–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º")
		if err != nil {
			log.Println(err)
		}
		return
	}

	opponent := m.Mentions[0]
	startTxt := h.duelStart(m.Author, opponent, bet)

	startMsg, err := s.ChannelMessageSend(m.ChannelID, startTxt)
	if err != nil {
		log.Println(err)
		return
	}
	duelResult, err := h.duel(s, m.ChannelID, startMsg.ID, m.Author, opponent, bet)
	if err != nil {
		log.Println(err)
		return
	}
	if duelResult == "" {
		return
	}
	_, err = s.ChannelMessageEdit(m.ChannelID, startMsg.ID, duelResult)
	if err != nil {
		log.Println(err)
	}
}

// duelSlash Print invite to a duel and the result of the duel to the guild channel in response to the slash command
func (h *Handler) duelSlash(s *discordgo.Session, i *discordgo.InteractionCreate) {
	if i.Member == nil {
		return
	}

	opponent := i.ApplicationCommandData().Options[0].UserValue(s)
	bet := int(i.ApplicationCommandData().Options[1].IntValue())

	startTxt := h.duelStart(i.Member.User, opponent, bet)

	err := s.InteractionRespond(i.Interaction, &discordgo.InteractionResponse{
		Type: discordgo.InteractionResponseChannelMessageWithSource,
		Data: &discordgo.InteractionResponseData{
			Content: startTxt,
		},
	})
	if err != nil {
		log.Printf("Failed to response the command %v, %v\n", i.ApplicationCommandData().Name, err)
	}
	resp, _ := s.InteractionResponse(s.State.User.ID, i.Interaction)

	duelResult, err := h.duel(s, i.ChannelID, resp.ID, i.Member.User, opponent, bet)
	if err != nil {
		log.Println(err)
		return
	}
	if duelResult == "" {
		return
	}
	_, err = s.InteractionResponseEdit(s.State.User.ID, i.Interaction, &discordgo.WebhookEdit{
		Content: duelResult,
	})
	if err != nil {
		_, _ = s.FollowupMessageCreate(s.State.User.ID, i.Interaction, true, &discordgo.WebhookParams{
			Content: "Something went wrong",
		})
		return
	}
}

// duelStart invite to a duel
func (h *Handler) duelStart(challenger, opponent *discordgo.User, bet int) string {
	var sb strings.Builder

	if bet < 0 {
		return "–°—Ç–∞–≤–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π"
	}

	authorScore, _ := h.repository.GetScore(challenger.ID)
	opponentScore, _ := h.repository.GetScore(opponent.ID)
	if bet > authorScore {
		sb.WriteString("–°—Ç–∞–≤–∫–∞ —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∞, —É —Ç–µ–±—è –≤—Å–µ–≥–æ ")
		sb.WriteString(strconv.Itoa(authorScore))
		return sb.String()
	}
	if bet > opponentScore {
		sb.WriteString("–£ —Ç–≤–æ–µ–≥–æ –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—á–∫–æ–≤, —Å—Ç–∞–≤–∫–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å ")
		sb.WriteString(strconv.Itoa(opponentScore))
		return sb.String()
	}

	sb.WriteString(opponent.Mention())
	sb.WriteString(" —Ç–µ–±—è –≤—ã–∑–≤–∞–ª–∏ –Ω–∞ –¥—É—ç–ª—å, –Ω–∞–∂–º–∏ –Ω–∞ :game_die: —á—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å, –∏–ª–∏ :no_entry_sign: —á—Ç–æ–±—ã –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è")
	return sb.String()
}

// duel process the duel
func (h *Handler) duel(s *discordgo.Session, channelID, messageID string, challenger, opponent *discordgo.User, bet int) (string, error) {
	betStr := strconv.Itoa(bet)
	err := s.MessageReactionAdd(channelID, messageID, "üé≤")
	if err != nil {
		return "", err
	}
	err = s.MessageReactionAdd(channelID, messageID, "üö´")
	if err != nil {
		log.Println(err)
		// not critical no need for return here
	}

	accept := <-h.eventChan
	if accept != "roll" {
		_, _ = s.ChannelMessageEdit(channelID, messageID, opponent.Username+" –æ—Ç–∫–∞–∑–∞–ª—Å—è")
		return "", nil
	}

	authorRoll := rand.Intn(100) + 1   //nolint:gosec
	opponentRoll := rand.Intn(100) + 1 //nolint:gosec

	var sb strings.Builder
	sb.WriteString(challenger.Username + " –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç " + strconv.Itoa(authorRoll) + "\n")
	sb.WriteString(opponent.Username + " –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç " + strconv.Itoa(opponentRoll) + "\n")
	switch {
	case authorRoll < opponentRoll:
		err := h.repository.AddScore(challenger.ID, -bet)
		if err != nil {
			return "", err
		}
		err = h.repository.AddScore(opponent.ID, bet)
		if err != nil {
			return "", err
		}
		sb.WriteString(opponent.Username + " –ø–æ–±–µ–¥–∏–ª –∏ –ø–æ–ª—É—á–∞–µ—Ç" + betStr + " –æ—á–∫–æ–≤ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞!")
	case authorRoll > opponentRoll:
		err := h.repository.AddScore(challenger.ID, bet)
		if err != nil {
			return "", err
		}
		err = h.repository.AddScore(opponent.ID, -bet)
		if err != nil {
			return "", err
		}
		sb.WriteString(challenger.Username + " –ø–æ–±–µ–¥–∏–ª –∏ –ø–æ–ª—É—á–∞–µ—Ç " + betStr + " –æ—á–∫–æ–≤ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞!")
	default:
		sb.WriteString("–í–∞—à–∏ —Å–∏–ª—ã —Ä–∞–≤–Ω—ã, –æ–±–∞ –æ—Å—Ç–∞–ª–∏—Å—å –ø—Ä–∏ —Å–≤–æ—ë–º")
	}
	return sb.String(), nil
}
