package commands

import (
	"fmt"
	"github.com/bwmarrin/discordgo"
	"log"
	"math/rand"
	"strconv"
	"strings"
)

type duel struct {
	sess       *discordgo.Session
	channelID  string
	messageID  string
	challenger *discordgo.User
	opponent   *discordgo.User
	bet        int
}

// duelMessage Print invite to a duel and the result of the duel to the guild channel in response to the text command
func (h *Handler) duelMessage(s *discordgo.Session, m *discordgo.MessageCreate) {
	// check message came from a channel
	if m.Member == nil {
		sendMessageReply(s, m, "–í—ã–∑–≤–∞—Ç—å –Ω–∞ –¥—É—ç–ª—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –Ω–∞ –∫–∞–Ω–∞–ª–µ")
		return
	}

	str := strings.Fields(m.Content)

	// check is command correct
	if len(str) != 3 {
		sendMessageReply(s, m, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å `!duel @user —Å—Ç–∞–≤–∫–∞`")
		return
	}
	if len(m.Mentions) != 1 {
		sendMessageReply(s, m, "–û–ø–ø–æ–Ω–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, —É–ø–æ–º—è–Ω–∏ –æ–¥–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ —á–µ—Ä–µ–∑ @")
		return
	}

	bet, err := strconv.Atoi(str[2])
	if err != nil {
		sendMessageReply(s, m, "–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º")
		return
	}

	opponent := m.Mentions[0]
	duel := duel{sess: s, channelID: m.ChannelID, challenger: m.Author, opponent: opponent, bet: bet}
	// print invite to duel
	startTxt, ok := h.duelStart(duel)
	startMsg, done := sendMessageReply(s, m, startTxt)
	if !ok || !done {
		return
	}

	duel.messageID = startMsg.ID
	duelResult, err := h.duel(duel)
	if err != nil {
		log.Printf("Duel failed %v\n", err)
		return
	}
	if duelResult == "" {
		return
	}
	// update message to show result
	_, err = s.ChannelMessageEdit(m.ChannelID, startMsg.ID, duelResult)
	if err != nil {
		log.Println(err)
	}
}

// duelSlash Print invite to a duel and the result of the duel to the guild channel in response to the slash command
func (h *Handler) duelSlash(s *discordgo.Session, i *discordgo.InteractionCreate) {
	if i.Member == nil {
		sendRespond(s, i, "–í—ã–∑–≤–∞—Ç—å –Ω–∞ –¥—É—ç–ª—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –Ω–∞ –∫–∞–Ω–∞–ª–µ")
		return
	}

	opponent := i.ApplicationCommandData().Options[0].UserValue(s)
	bet := int(i.ApplicationCommandData().Options[1].IntValue())

	duel := duel{sess: s, channelID: i.ChannelID, challenger: i.Member.User, opponent: opponent, bet: bet}
	// print invite to duel
	startTxt, ok := h.duelStart(duel)
	done := sendRespond(s, i, startTxt)
	if !ok || !done {
		return
	}

	// get interaction message
	resp, err := s.InteractionResponse(s.State.User.ID, i.Interaction)
	if err != nil {
		log.Println(err)
		return
	}

	duel.messageID = resp.ID
	duelResult, err := h.duel(duel)
	if err != nil {
		log.Println(err)
		return
	}
	// there is nothing to print
	if duelResult == "" {
		return
	}
	// update message to show result
	_, err = s.InteractionResponseEdit(s.State.User.ID, i.Interaction, &discordgo.WebhookEdit{
		Content: duelResult,
	})
	if err != nil {
		_, _ = s.FollowupMessageCreate(s.State.User.ID, i.Interaction, true, &discordgo.WebhookParams{
			Content: "Something went wrong",
		})
		return
	}
}

// duelStart invite to a duel
func (h *Handler) duelStart(duel duel) (string, bool) {
	// check opponent is not bot
	if duel.opponent.ID == duel.sess.State.User.ID {
		return "–ù–µ–ª—å–∑—è –≤—ã–∑–≤–∞—Ç—å –±–æ—Ç–∞ –Ω–∞ –¥—É—ç–ª—å", false
	}

	if duel.bet < 0 {
		return "–°—Ç–∞–≤–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π", false
	}

	authorScore, _ := h.repository.GetScore(duel.challenger.ID)
	opponentScore, _ := h.repository.GetScore(duel.opponent.ID)
	if duel.bet > authorScore {
		return fmt.Sprintf("–°—Ç–∞–≤–∫–∞ —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∞, —É —Ç–µ–±—è –≤—Å–µ–≥–æ %d", authorScore), false
	}
	if duel.bet > opponentScore {
		msg := "–£ —Ç–≤–æ–µ–≥–æ –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—á–∫–æ–≤, —Å—Ç–∞–≤–∫–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å %d"
		return fmt.Sprintf(msg, opponentScore), false
	}

	msg := "%s —Ç–µ–±—è –≤—ã–∑–≤–∞–ª–∏ –Ω–∞ –¥—É—ç–ª—å, –Ω–∞–∂–º–∏ –Ω–∞ :game_die: —á—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å, –∏–ª–∏ :no_entry_sign: —á—Ç–æ–±—ã –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è"
	return fmt.Sprintf(msg, duel.opponent.Mention()), true
}

// duel process the duel
func (h *Handler) duel(duel duel) (string, error) {
	err := duel.sess.MessageReactionAdd(duel.channelID, duel.messageID, "üé≤")
	if err != nil {
		return "", err
	}
	err = duel.sess.MessageReactionAdd(duel.channelID, duel.messageID, "üö´")
	if err != nil {
		log.Println(err)
		// not critical no need for return here
	}

	accept := <-h.eventChan
	if accept != "roll" {
		_, _ = duel.sess.ChannelMessageEdit(duel.channelID, duel.messageID, duel.opponent.Username+" –æ—Ç–∫–∞–∑–∞–ª—Å—è")
		return "", nil
	}

	authorRoll := rand.Intn(100) + 1   //nolint:gosec
	opponentRoll := rand.Intn(100) + 1 //nolint:gosec

	var sb strings.Builder
	sb.WriteString(fmt.Sprintf("%s –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç %d\n", duel.challenger.Username, authorRoll))
	sb.WriteString(fmt.Sprintf("%s –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç %d\n", duel.opponent.Username, opponentRoll))
	switch {
	case authorRoll < opponentRoll:
		_ = h.repository.AddScore(duel.challenger.ID, -duel.bet)
		_ = h.repository.AddScore(duel.opponent.ID, duel.bet)
		sb.WriteString(fmt.Sprintf("%s –ø–æ–±–µ–¥–∏–ª –∏ –ø–æ–ª—É—á–∞–µ—Ç %d –æ—á–∫–æ–≤ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞!", duel.opponent.Username, duel.bet))
	case authorRoll > opponentRoll:
		_ = h.repository.AddScore(duel.challenger.ID, duel.bet)
		_ = h.repository.AddScore(duel.opponent.ID, -duel.bet)

		sb.WriteString(fmt.Sprintf("%s –ø–æ–±–µ–¥–∏–ª –∏ –ø–æ–ª—É—á–∞–µ—Ç %d –æ—á–∫–æ–≤ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞!", duel.challenger.Username, duel.bet))
	default:
		sb.WriteString("–í–∞—à–∏ —Å–∏–ª—ã —Ä–∞–≤–Ω—ã, –æ–±–∞ –æ—Å—Ç–∞–ª–∏—Å—å –ø—Ä–∏ —Å–≤–æ—ë–º")
	}
	return sb.String(), nil
}
